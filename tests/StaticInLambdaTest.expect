#include <new> // for thread-safe static's placement new
#include <stdint.h> // for uint64_t under Linux/GCC

#include <cstdio>
#include <cstring>
#include <new>

class Singleton
{
  
  public: 
  static Singleton & Instance();
  
  inline int Get() const
  {
    return this->mX;
  }
  
  inline void Set(int x)
  {
    this->mX = x;
  }
  
  
  private: 
  inline Singleton() noexcept = default;
  inline ~Singleton() noexcept
  {
  }
  
  int mX;
  public: 
};


static size_t counter = 0;

Singleton & Singleton::Instance()
{
  static uint64_t __singletonGuard;
  alignas(Singleton) static char __singleton[sizeof(Singleton)];
  
  if((__singletonGuard & 255) == 0) {
    if(__cxa_guard_acquire(&__singletonGuard)) {
      new (&__singleton)Singleton();
      __singletonGuard = true;
      __cxa_guard_release(&__singletonGuard);
      /* __cxa_atexit(Singleton::~Singleton, &__singleton, &__dso_handle); */
    } 
    
  } 
  
  static bool passed = true;
  return *reinterpret_cast<Singleton*>(__singleton);
}

