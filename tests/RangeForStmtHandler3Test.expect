#include <type_traits>
#include <algorithm>
#include <iterator>
#include <iostream>

struct null_sentinal_t
{
  template<class Rhs, std::enable_if_t<!std::is_same<Rhs, null_sentinal_t>{}, int>  = 0>
  friend inline bool operator==(const Rhs & ptr, null_sentinal_t)
  {
    return !*ptr;
  }
  
  /* First instantiated from: RangeForStmtHandler3Test.cpp:19 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  friend inline bool operator==<const char *, 0>(const char *const & ptr, null_sentinal_t)
  {
    return !static_cast<bool>(*ptr);
  }
  #endif
  
  template<class Rhs, std::enable_if_t<!std::is_same<Rhs, null_sentinal_t>{}, int>  = 0>
  friend inline bool operator!=(const Rhs & ptr, null_sentinal_t)
  {
    return !(ptr == null_sentinal_t{});
  }
  
  /* First instantiated from: RangeForStmtHandler3Test.cpp:49 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  friend inline bool operator!=<const char *, 0>(const char *const & ptr, null_sentinal_t)
  {
    return !(operator==(ptr, null_sentinal_t{}));
  }
  #endif
  
  template<class Lhs, std::enable_if_t<!std::is_same<Lhs, null_sentinal_t>{}, int>  = 0>
  friend inline bool operator==(null_sentinal_t, const Lhs & ptr)
  {
    return !*ptr;
  }
  template<class Lhs, std::enable_if_t<!std::is_same<Lhs, null_sentinal_t>{}, int>  = 0>
  friend inline bool operator!=(null_sentinal_t, const Lhs & ptr)
  {
    return !(null_sentinal_t{} == ptr);
  }
  friend inline bool operator==(null_sentinal_t, null_sentinal_t)
  {
    return true;
  }
  friend inline bool operator!=(null_sentinal_t, null_sentinal_t)
  {
    return false;
  }
  // inline constexpr null_sentinal_t(const null_sentinal_t &) noexcept = default;
};


template<class Char>
struct str_view
{
  const Char * ptr = 0;
  inline const Char * begin() const
  {
    return this->ptr;
  }
  
  inline null_sentinal_t end() const
  {
    return {};
  }
  
};

/* First instantiated from: RangeForStmtHandler3Test.cpp:49 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct str_view<char>
{
  const char * ptr;
  inline const char * begin() const
  {
    return this->ptr;
  }
  
  inline null_sentinal_t end() const
  {
    return {};
  }
  
};

#endif

int main()
{
  {
    str_view<char> && __range1 = str_view<char>{"hello world\n"};
    const char * __begin1 = __range1.begin();
    null_sentinal_t __end1 = __range1.end();
    for(; operator!=(__begin1, null_sentinal_t(__end1)); ++__begin1) {
      char c = *__begin1;
      std::operator<<(std::cout, c);
    }
    
  }
  return 0;
}
