/*************************************************************************************
 * NOTE: The coroutine transformation you've enabled is a hand coded transformation! *
 *       Most of it is _not_ present in the AST. What you see is an approximation.   *
 *************************************************************************************/
#include <coroutine>
#include <exception>
#include <new>
#include <utility>
#include <chrono>
#include <iostream>

template<typename T>
struct my_future
{
  struct promise_type
  {
    inline std::suspend_always initial_suspend()
    {
      return {};
    }
    
    inline std::suspend_always final_suspend() noexcept
    {
      return {};
    }
    
    inline auto get_return_object()
    {
      return my_future<T>{};
    }
    
    inline void unhandled_exception()
    {
      std::terminate();
    }
    
    inline void return_void()
    {
    }
    
  };
  
  bool await_ready();
  
  void await_suspend(std::coroutine_handle<void>);
  
  T await_resume();
  
};

/* First instantiated from: EduCoroutineCoAwaitOperatorTest.cpp:51 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct my_future<int>
{
  struct promise_type
  {
    inline std::suspend_always initial_suspend()
    {
      return {};
    }
    
    inline std::suspend_always final_suspend() noexcept
    {
      return {};
    }
    
    inline my_future<int> get_return_object()
    {
      return my_future<int>{};
    }
    
    inline void unhandled_exception()
    {
      std::terminate();
    }
    
    inline void return_void()
    {
    }
    
    // inline constexpr promise_type() noexcept = default;
  };
  
  bool await_ready();
  
  void await_suspend(std::coroutine_handle<void>);
  
  int await_resume();
  
};

#endif

template<class Rep, class Period>
auto operator co_await(std::chrono::duration<Rep, Period> d)
{
  struct awaiter
  {
    std::chrono::duration<long long, std::ratio<1, 1000000> > duration;
    inline awaiter(std::chrono::duration<long long, std::ratio<1, 1000000> > d)
    : duration{std::chrono::duration<long long, std::ratio<1, 1000000> >(d)}
    {
    }
    
    inline bool await_ready() const
    {
      return this->duration.count() <= 0;
    }
    
    inline void await_resume()
    {
    }
    
    inline void await_suspend(std::coroutine_handle<void> h)
    {
    }
    
  };
  
  return awaiter{{d}};
}

#ifdef INSIGHTS_USE_TEMPLATE
template<>
awaiter operator co_await<long long, std::ratio<1, 1000> >(std::chrono::duration<long long, std::ratio<1, 1000> > d)
{
  struct awaiter
  {
    std::chrono::duration<long long, std::ratio<1, 1000000> > duration;
    inline awaiter(std::chrono::duration<long long, std::ratio<1, 1000000> > d)
    : duration{std::chrono::duration<long long, std::ratio<1, 1000000> >(d)}
    {
    }
    
    inline bool await_ready() const
    {
      return this->duration.count() <= 0;
    }
    
    inline void await_resume()
    {
    }
    
    inline void await_suspend(std::coroutine_handle<void> h)
    {
    }
    
  };
  
  return awaiter{std::chrono::duration<long long, std::ratio<1, 1000000> >(d)};
}
#endif


using namespace std::chrono;

my_future<int> h();
struct __gFrame
{
  void (*resume_fn)(__gFrame *);
  void (*destroy_fn)(__gFrame *);
  std::__coroutine_traits_sfinae<my_future<int> >::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  std::suspend_always __suspend_51_16;
  awaiter __suspend_54_5;
  my_future<int> __suspend_56_14;
  int __suspend_56_14_res;
  std::suspend_always __suspend_51_16_1;
};

my_future<int> g()
{
  /* Allocate the frame including the promise */
  /* Note: The actual parameter new is __builtin_coro_size */
  __gFrame * __f = reinterpret_cast<__gFrame *>(operator new(sizeof(__gFrame)));
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<my_future<int> >::promise_type{};
  
  /* Forward declare the resume and destroy function. */
  void __gResume(__gFrame * __f);
  void __gDestroy(__gFrame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__gResume;
  __f->destroy_fn = &__gDestroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __gResume(__f);
  
  
  return __f->__promise.get_return_object();
}

/* This function invoked by coroutine_handle<>::resume() */
void __gResume(__gFrame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_g_1;
      case 2: goto __resume_g_2;
      case 3: goto __resume_g_3;
    }
    
    /* co_await EduCoroutineCoAwaitOperatorTest.cpp:51 */
    __f->__suspend_51_16 = __f->__promise.initial_suspend();
    if(!__f->__suspend_51_16.await_ready()) {
      __f->__suspend_51_16.await_suspend(std::coroutine_handle<my_future<int>::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_g_1:
    __f->__suspend_51_16.await_resume();
    std::operator<<(std::cout, "just about go to sleep...\n");
    
    /* co_await EduCoroutineCoAwaitOperatorTest.cpp:54 */
    __f->__suspend_54_5 = operator co_await(std::operator""ms(10ULL));
    if(!__f->__suspend_54_5.await_ready()) {
      __f->__suspend_54_5.await_suspend(std::coroutine_handle<my_future<int>::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 2;
      return;
    } 
    
    __resume_g_2:
    __f->__suspend_54_5.await_resume();
    std::operator<<(std::cout, "resumed\n");
    
    /* co_await EduCoroutineCoAwaitOperatorTest.cpp:56 */
    __f->__suspend_56_14 = h();
    if(!__f->__suspend_56_14.await_ready()) {
      __f->__suspend_56_14.await_suspend(std::coroutine_handle<my_future<int>::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 3;
      return;
    } 
    
    __resume_g_3:
    __f->__suspend_56_14_res = __f->__suspend_56_14.await_resume();
    __f->__suspend_56_14_res;
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await EduCoroutineCoAwaitOperatorTest.cpp:51 */
  __f->__suspend_51_16_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_51_16_1.await_ready()) {
    __f->__suspend_51_16_1.await_suspend(std::coroutine_handle<my_future<int>::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
    return;
  } 
  
  __f->destroy_fn(__f);
}

/* This function invoked by coroutine_handle<>::destroy() */
void __gDestroy(__gFrame * __f)
{
  /* destroy all variables with dtors */
  __f->~__gFrame();
  /* Deallocating the coroutine frame */
  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */
  operator delete(static_cast<void *>(__f));
}

