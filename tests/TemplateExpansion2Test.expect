#define INSIGHTS_USE_TEMPLATE

#include <cstddef>
#include <type_traits>

namespace details
{
  template<class T>
  struct remove_reference
  {
    using type = T;
  };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct remove_reference<int[16]>
  {
    using type = int[16];
  };
  
  #endif
  template<class T>
  struct remove_reference<T &>
  {
    using type = T;
  };
  
  template<class T>
  struct remove_reference<T &&>
  {
    using type = T;
  };
  
  template<class T, size_t N = 0>
  struct extent
  {
    inline static constexpr const size_t value = N;
    
    /* PASSED: static_assert(N != 0, "Arrays only"); */
  };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct extent<int[16], 0>
  {
    inline static constexpr const size_t value = 16UL;
    
    /* PASSED: static_assert(16UL != 0, "Arrays only"); */
  };
  
  #endif
  template<class T, size_t I>
  struct extent<T[I], 0>
  {
    inline static constexpr const size_t value = I;
    
    /* PASSED: static_assert(I != 0, "Arrays only"); */
  };
  
  
}

class B
{
  public: 
  // inline constexpr B() noexcept = default;
};


class E
{
  public: 
  // inline constexpr E() noexcept = default;
};


template<typename T>
class S : public B
{
};

/* First instantiated from: TemplateExpansion2Test.cpp:48 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class S<double> : public B
{
  public: 
  // inline constexpr S() noexcept = default;
};

#endif
/* First instantiated from: TemplateExpansion2Test.cpp:59 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class S<int> : public B
{
  public: 
  // inline constexpr S() noexcept = default;
};

#endif

template<typename T>
class Y : public S<T>, public E
{
};

/* First instantiated from: TemplateExpansion2Test.cpp:61 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class Y<double> : public S<double>, public E
{
  public: 
  // inline constexpr Y() noexcept = default;
};

#endif

void test()
{
  int buffer[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const size_t & xx = details::extent<int[16], 0>::value;
  S<int> s;
  Y<double> y;
}

int main()
{
  return 0;
}
