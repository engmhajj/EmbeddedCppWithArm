template<typename Type, typename Archive>
static inline constexpr auto simple()
{
  return requires(Type && item, Archive && archive) {
    serialize(archive, item);
  };
}

#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr bool simple<int, int>()
{
  return requires(int && item, int && archive) {
    requires false;
  };
}
#endif


template<typename Type, typename Archive>
static inline constexpr auto nested()
{
  return requires(Type && item, Archive && archive) {
    requires serialize(archive, item);
  };
}

#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr bool nested<int, int>()
{
  return requires(int && item, int && archive) {
    requires false;
  };
}
#endif


template<typename Type>
static inline constexpr auto type()
{
  return requires(Type && item) {
    typename Type::value;
  };
}

#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr bool type<int>()
{
  return requires(int && item) {
    requires false;
  };
}
#endif


int main()
{
  return static_cast<int>((simple<int, int>() || nested<int, int>()) || type<int>());
}
