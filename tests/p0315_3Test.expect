namespace Test
{
    
  class __lambda_7_5
  {
    public: 
    inline /*constexpr */ void operator()() const
    {
    }
    
    using retType_7_5 = auto (*)() -> void;
    inline constexpr operator retType_7_5 () const noexcept
    {
      return __invoke;
    };
    
    private: 
    static inline /*constexpr */ void __invoke()
    {
      __lambda_7_5{}.operator()();
    }
    
    
    public:
    // /*constexpr */ __lambda_7_5() = default;
    
  };
  
  
  class __lambda_9_14
  {
    public: 
    inline /*constexpr */ auto operator()() const
    {
    }
    
    using retType_9_14 = auto (*)();
    inline constexpr operator retType_9_14 () const noexcept
    {
      return __invoke;
    };
    
    private: 
    static inline /*constexpr */ auto __invoke()
    {
      return __lambda_9_14{}.operator()();
    }
    
    
    public:
    // /*constexpr */ __lambda_9_14() = default;
    
  };
  
  template<typename T>
  concept X = requires(T t) {
    __lambda_7_5();
    __lambda_9_14{};
  };
  
  
}

template<Test::X t>
void Fun()
{
}

/* First instantiated from: p0315_3Test.cpp:19 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void Fun<int>()
{
}
#endif


int main()
{
  Fun<int>();
  return 0;
}
