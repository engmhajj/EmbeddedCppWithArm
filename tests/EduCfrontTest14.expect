/*************************************************************************************
 * NOTE: This an educational hand-rolled transformation. Things can be incorrect or  *
 * buggy.                                                                            *
 *************************************************************************************/
#include <stddef.h> // NULL and more
void __cxa_start(void);
void __cxa_atexit(void);
void* malloc(unsigned int);
extern "C" void free(void*);
extern "C" void* __cxa_vec_new(void*, unsigned int, unsigned int, unsigned int, void* (*)(void*), void* (*)(void*));
extern "C" void __cxa_vec_delete(void *, unsigned int, unsigned int, void* (*destructor)(void *) );

typedef struct A
{
  char __dummy;
} A;

inline void Destructor_A(A * __this)
{
}


typedef struct B
{
  char __dummy;
} B;

inline B * Constructor_B(B * __this)
{
  return __this;
}

inline B * MoveConstructor_B(B * __this, B * __rhs)
{
  return __this;
}

inline B * operatorEqual(B * __this, const B * __rhs)
{
  return __this;
}


int __main(void)
{
  A * a = (A *)__cxa_vec_new(malloc(sizeof(A) * 3), sizeof(A), 3, 0, (void *(*)(void *))NULL, (void *(*)(void *))Destructor_A);
  if(a) {
    __cxa_vec_delete(a, sizeof(A), 0, (void *(*)(void *))Destructor_A);
    free(a);
  } 
  
  int * i = (int *)malloc(sizeof(int) * 3);
  if(i) {
    i[0] = 2;
    i[1] = 3;
  } 
  
  int * x = (int *)malloc(sizeof(int));
  if(x) {
    *x = 2;
  } 
  
  B b1;
  Constructor_B((B *)&b1);
  B b2;
  MoveConstructor_B((B *)&b2, &b1);
  return 0;
  /* b2 // lifetime ends here */
  /* b1 // lifetime ends here */
}

int main(void)
{
  __cxa_start();
  int ret = __main();
  __cxa_atexit();
  return ret;
  /* ret // lifetime ends here */
}

void __cxa_start(void)
{
}

void __cxa_atexit(void)
{
}

