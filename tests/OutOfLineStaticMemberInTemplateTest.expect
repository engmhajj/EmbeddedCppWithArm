#define INSIGHTS_USE_TEMPLATE

template<int val>
struct MyClass
{
  static int var;
};

/* First instantiated from: OutOfLineStaticMemberInTemplateTest.cpp:42 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct MyClass<5>
{
  static int var;
};

#endif
/* First instantiated from: OutOfLineStaticMemberInTemplateTest.cpp:43 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct MyClass<7>
{
  static int var;
};

#endif

template<int val>
int MyClass<val>::var = val;

template<typename T, int val>
struct MyClass2
{
  static int var;
};

/* First instantiated from: OutOfLineStaticMemberInTemplateTest.cpp:47 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct MyClass2<int, 5>
{
  static int var;
};

#endif
/* First instantiated from: OutOfLineStaticMemberInTemplateTest.cpp:48 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct MyClass2<char, 7>
{
  static int var;
};

#endif

template<typename T, int val>
int MyClass2<T, val>::var = val;

template<typename T, int val, typename ... Ts>
struct MyClass3
{
  static int var;
};

/* First instantiated from: OutOfLineStaticMemberInTemplateTest.cpp:52 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct MyClass3<int, 5>
{
  static int var;
};

#endif
/* First instantiated from: OutOfLineStaticMemberInTemplateTest.cpp:53 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct MyClass3<char, 7>
{
  static int var;
};

#endif

template<typename T, int val, typename ... Ts>
int MyClass3<T, val, Ts... >::var = val;

namespace Test
{
  template<typename T, int val, typename ... Ts>
  struct MyClass3
  {
    static int var;
  };
  
  /* First instantiated from: OutOfLineStaticMemberInTemplateTest.cpp:57 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct MyClass3<int, 5>
  {
    static int var;
  };
  
  #endif
  /* First instantiated from: OutOfLineStaticMemberInTemplateTest.cpp:58 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct MyClass3<char, 7>
  {
    static int var;
  };
  
  #endif
  template<typename T, int val, typename ... Ts>
  int MyClass3<T, val, Ts... >::var = val;
  #ifdef INSIGHTS_USE_TEMPLATE
  int MyClass3<int, 5>::var = 5;
  #endif
  #ifdef INSIGHTS_USE_TEMPLATE
  int MyClass3<char, 7>::var = 7;
  #endif
  
}

int main(int argc, char ** argv)
{
  MyClass<5> a = {};
  MyClass<7> b = {};
  int s = a.var + b.var;
  MyClass2<int, 5> a2 = {};
  MyClass2<char, 7> b2 = {};
  int s2 = a2.var + b2.var;
  MyClass3<int, 5> a3 = {};
  MyClass3<char, 7> b3 = {};
  int s3 = a3.var + b3.var;
  Test::MyClass3<int, 5> a4 = {};
  Test::MyClass3<char, 7> b4 = {};
  int s4 = a4.var + b4.var;
  return 0;
}

#ifdef INSIGHTS_USE_TEMPLATE
int MyClass<5>::var = 5;
#endif
#ifdef INSIGHTS_USE_TEMPLATE
int MyClass<7>::var = 7;
#endif

#ifdef INSIGHTS_USE_TEMPLATE
int MyClass2<int, 5>::var = 5;
#endif
#ifdef INSIGHTS_USE_TEMPLATE
int MyClass2<char, 7>::var = 7;
#endif

#ifdef INSIGHTS_USE_TEMPLATE
int MyClass3<int, 5>::var = 5;
#endif
#ifdef INSIGHTS_USE_TEMPLATE
int MyClass3<char, 7>::var = 7;
#endif
