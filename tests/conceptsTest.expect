template<typename T>
concept C = requires(T t) {
  f(t);
};


template<typename T>
inline constexpr bool foo()
{
  return false;
}

template<typename T>
requires requires(T t) {
  b(t);
}
inline constexpr bool FunctionWithRequiresForTemplateParametersAndReturn() requires requires(T t) {
  f(t);
}
{
  return true;
}

/* First instantiated from: conceptsTest.cpp:84 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr bool FunctionWithRequiresForTemplateParametersAndReturn<a::A>() requires requires(T t) {
  f(t);
}
{
  return true;
}
#endif


template<typename T>
requires requires(T t) {
  f(t);
}
inline constexpr bool FunctionWithRequiresForTemplateParameters()
{
  return true;
}

/* First instantiated from: conceptsTest.cpp:85 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr bool FunctionWithRequiresForTemplateParameters<a::A>()
{
  return true;
}
#endif


template<typename T>
inline constexpr bool FunctionWithRequiresForReturn() requires requires(T t) {
  f(t);
}
{
  return true;
}

/* First instantiated from: conceptsTest.cpp:86 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr bool FunctionWithRequiresForReturn<a::A>() requires requires(T t) {
  f(t);
}
{
  return true;
}
#endif


struct test
{
  template<typename T>
  inline constexpr bool foo()
  {
    return false;
  }
  template<typename T>
  requires (f(T()) , true)
  inline constexpr bool FunctionWithRequiresForTemplateParameters()
  {
    return true;
  }
  template<typename T>
  inline constexpr bool FunctionWithRequiresForReturn() requires requires(T t) {
    f(t);
  }
  {
    return true;
  }
  template<typename T>
  requires (b(T()) , true)
  inline constexpr bool FunctionWithRequiresForTemplateParametersAndReturn() requires requires(T t) {
    f(t);
  }
  {
    return true;
  }
};


template<typename T>
concept default_constructible = requires{
  T{};
  T();
};


template<typename T>
requires default_constructible<T>
class ClsWithRequires
{
};

/* First instantiated from: conceptsTest.cpp:88 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class ClsWithRequires<int>
{
};

#endif

namespace a
{
  struct A
  {
  };
  
  void f(A a);
  void b(A a);
  template<typename T>
  requires default_constructible<T>
  class ClsWithRequires
  {
  };
  
  /* First instantiated from: conceptsTest.cpp:90 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  class ClsWithRequires<int>
  {
  };
  
  #endif
  
}

/* PASSED: static_assert(C<a::A>); */

namespace RequiresWithParens
{
  template<typename T>
  static inline constexpr bool get_value()
  {
    return T::value;
  }
  
  /* First instantiated from: conceptsTest.cpp:68 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline constexpr bool get_value<Value>()
  {
    return Value::value;
  }
  #endif
  
  template<typename T>
  requires ((sizeof(T) > 1) && get_value<T>())
  auto f(T t)
  {
    return t.x;
  }
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  int f<Value>(Value t)
  {
    return t.x;
  }
  #endif
  
  
}

struct Value
{
  inline static constexpr const bool value = true;
  int x;
};


int main()
{
  FunctionWithRequiresForTemplateParametersAndReturn<a::A>();
  FunctionWithRequiresForTemplateParameters<a::A>();
  FunctionWithRequiresForReturn<a::A>();
  ClsWithRequires<int> c = {};
  a::ClsWithRequires<int> ac = {};
  RequiresWithParens::f(Value{0});
  return 0;
}
