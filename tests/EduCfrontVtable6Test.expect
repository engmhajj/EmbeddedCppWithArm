/*************************************************************************************
 * NOTE: This an educational hand-rolled transformation. Things can be incorrect or  *
 * buggy.                                                                            *
 *************************************************************************************/
void __cxa_start(void);
void __cxa_atexit(void);
typedef int (*__vptp)();

struct __mptr
{
    short  d;
    short  i;
    __vptp f;
};

extern struct __mptr* __vtbl_array[];


#include <cstdio>

typedef struct A
{
  double md;
} A;

inline A * operatorEqual(A * __this, const A * __rhs)
{
  __this->md = __rhs->md;
  return __this;
}

inline A * operatorEqual(A * __this, A * __rhs)
{
  __this->md = __rhs->md;
  return __this;
}


typedef struct B
{
  __mptr * __vptrB;
  int mX;
} B;

inline void FunB(B * __this)
{
  puts("B::Fun");
}

inline B * operatorEqual(B * __this, const B * __rhs)
{
  __this->mX = __rhs->mX;
  return __this;
}

inline B * operatorEqual(B * __this, B * __rhs)
{
  __this->mX = __rhs->mX;
  return __this;
}

inline B * Constructor_B(B * __this)
{
  __this->__vptrB = __vtbl_array[0];
  __this->mX = 5;
  return __this;
}


typedef struct C
{
  double md;
  __mptr * __vptrB;
  int mX;
  int mB;
} C;

inline void FunC(C * __this)
{
  puts("C::Fun");
}

inline C * operatorEqual(C * __this, const C * __rhs)
{
  __this->md = __rhs->md;
  operatorEqual((A *)__this, (A *)__rhs);
  __this->mX = __rhs->mX;
  operatorEqual((B *)__this, (B *)__rhs);
  __this->mB = __rhs->mB;
  return __this;
}

inline C * operatorEqual(C * __this, C * __rhs)
{
  __this->md = __rhs->md;
  operatorEqual((A *)__this, (A *)__rhs);
  __this->mX = __rhs->mX;
  operatorEqual((B *)__this, (B *)__rhs);
  __this->mB = __rhs->mB;
  return __this;
}

inline C * Constructor_C(C * __this)
{
  Constructor_B((B *)__this);
  __this->mX = 5;
  __this->__vptrB = __vtbl_array[1];
  __this->mB = 8;
  return __this;
}


int __main(void)
{
  C c;
  Constructor_C((C *)&c);
  (*((void (*)(C *))((&c)->__vptrB[0]).f))((((C *)(char *)(&c)) + ((&c)->__vptrB[0]).d));
  B * b = (B *)&c;
  (*((void (*)(B *))((b)->__vptrB[0]).f))((((B *)(char *)(b)) + ((b)->__vptrB[0]).d));
  return 0;
  /* c // lifetime ends here */
}

int main(void)
{
  __cxa_start();
  int ret = __main();
  __cxa_atexit();
  return ret;
  /* ret // lifetime ends here */
}

__mptr __vtbl_B[1] = {0, 0, (__vptp)FunB};
__mptr __vtbl_CA[1] = {0, 0, (__vptp)FunC};

__mptr * __vtbl_array[2] = {__vtbl_B, __vtbl_CA};

void __cxa_start(void)
{
}

void __cxa_atexit(void)
{
}

