
class __lambda_3_10
{
  public: 
  template<class T>
  inline /*constexpr */ auto operator()(T t, int i) const
  {
    return i;
  }
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline /*constexpr */ int operator()<int>(int t, int i) const
  {
    return i;
  }
  #endif
  
  private: 
  template<class T>
  static inline /*constexpr */ auto __invoke(T t, int i)
  {
    return __lambda_3_10{}.operator()<T>(t, i);
  }
  
  public:
  // /*constexpr */ __lambda_3_10() = default;
  
};

__lambda_3_10 l = __lambda_3_10{};

int main()
{
  return static_cast<int>(l.operator()(3, 4) == 4);
}
