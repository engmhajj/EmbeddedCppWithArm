#define INSIGHTS_USE_TEMPLATE

namespace A
{
    
  class __lambda_6_33
  {
    public: 
    inline /*constexpr */ bool operator()() const
    {
      return true;
    }
    
    using retType_6_33 = auto (*)() -> bool;
    inline constexpr operator retType_6_33 () const noexcept
    {
      return __invoke;
    };
    
    private: 
    static inline /*constexpr */ bool __invoke()
    {
      return __lambda_6_33{}.operator()();
    }
    
    
    public:
    // /*constexpr */ __lambda_6_33() = default;
    
  };
  
  template<class F = __lambda_6_33>
  bool test(F f)
  {
    return f();
  }
  
  /* First instantiated from: p0315Test.cpp:12 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  bool test<__lambda_6_33>(__lambda_6_33 f)
  {
    return f.operator()();
  }
  #endif
  
  bool call()
  {
    return test(__lambda_6_33{});
  }
  
}

int main()
{
  return static_cast<int>(A::call());
}
