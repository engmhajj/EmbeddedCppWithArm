/*************************************************************************************
 * NOTE: The coroutine transformation you've enabled is a hand coded transformation! *
 *       Most of it is _not_ present in the AST. What you see is an approximation.   *
 *************************************************************************************/
#include <coroutine>
#include <exception>
#include <new>
#include <utility>

struct generator
{
  struct promise_type
  {
    int current_value{};
    inline std::suspend_always yield_value(int value)
    {
      this->current_value = value;
      return {};
    }
    
    inline std::suspend_never initial_suspend()
    {
      return {};
    }
    
    inline std::suspend_always final_suspend() noexcept
    {
      return {};
    }
    
    inline generator get_return_object()
    {
      return generator{this};
    }
    
    inline void unhandled_exception()
    {
      std::terminate();
    }
    
    inline void return_value(int v)
    {
      this->current_value = v;
    }
    
    static inline generator get_return_object_on_allocation_failure()
    {
      throw std::bad_alloc();
    }
    
  };
  
  using coro_handle = std::coroutine_handle<promise_type>;
  inline bool await_ready()
  {
    return false;
  }
  
  inline void await_suspend(std::coroutine_handle<promise_type> waiter)
  {
    waiter.resume();
  }
  
  inline int await_resume()
  {
    return this->p.promise().current_value;
  }
  
  inline generator(generator && rhs)
  : p{{std::exchange(rhs.p, nullptr)}}
  {
  }
  
  inline ~generator() noexcept
  {
    if(this->p.operator bool()) {
      this->p.destroy();
    } 
    
  }
  
  
  private: 
  inline explicit generator(promise_type * _p)
  : p{std::coroutine_handle<promise_type>::from_promise(*_p)}
  {
  }
  
  std::coroutine_handle<promise_type> p;
  public: 
  // inline constexpr generator(const generator &) /* noexcept */ = delete;
  // inline generator & operator=(const generator &) /* noexcept */ = delete;
};


struct __simpleReturnFrame
{
  void (*resume_fn)(__simpleReturnFrame *);
  void (*destroy_fn)(__simpleReturnFrame *);
  std::__coroutine_traits_sfinae<generator>::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  int v;
  std::suspend_never __suspend_50_11;
  std::suspend_always __suspend_50_11_1;
};

generator simpleReturn(int v)
{
  /* Allocate the frame including the promise */
  /* Note: The actual parameter new is __builtin_coro_size */
  __simpleReturnFrame * __f = reinterpret_cast<__simpleReturnFrame *>(operator new(sizeof(__simpleReturnFrame), std::nothrow));
  
  if(nullptr == __f) {
    return generator::promise_type::get_return_object_on_allocation_failure();
  } 
  
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  __f->v = std::forward<int>(v);
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<generator>::promise_type{};
  
  /* Forward declare the resume and destroy function. */
  void __simpleReturnResume(__simpleReturnFrame * __f);
  void __simpleReturnDestroy(__simpleReturnFrame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__simpleReturnResume;
  __f->destroy_fn = &__simpleReturnDestroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __simpleReturnResume(__f);
  
  
  return __f->__promise.get_return_object();
}

/* This function invoked by coroutine_handle<>::resume() */
void __simpleReturnResume(__simpleReturnFrame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_simpleReturn_1;
    }
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:50 */
    __f->__suspend_50_11 = __f->__promise.initial_suspend();
    if(!__f->__suspend_50_11.await_ready()) {
      __f->__suspend_50_11.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_simpleReturn_1:
    __f->__suspend_50_11.await_resume();
    /* co_return EduCoroutineCoreturnWithCoawaitTest.cpp:51 */
    __f->__promise.return_value(__f->v);
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:50 */
  __f->__suspend_50_11_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_50_11_1.await_ready()) {
    __f->__suspend_50_11_1.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
    return;
  } 
  
  __f->destroy_fn(__f);
}

/* This function invoked by coroutine_handle<>::destroy() */
void __simpleReturnDestroy(__simpleReturnFrame * __f)
{
  /* destroy all variables with dtors */
  __f->~__simpleReturnFrame();
  /* Deallocating the coroutine frame */
  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */
  operator delete(static_cast<void *>(__f));
}


struct __additionAwaitReturnFrame
{
  void (*resume_fn)(__additionAwaitReturnFrame *);
  void (*destroy_fn)(__additionAwaitReturnFrame *);
  std::__coroutine_traits_sfinae<generator>::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  int v;
  std::suspend_never __suspend_55_11;
  generator __suspend_56_24;
  int __suspend_56_24_res;
  generator __suspend_56_51;
  int __suspend_56_51_res;
  std::suspend_always __suspend_55_11_1;
};

generator additionAwaitReturn(int v)
{
  /* Allocate the frame including the promise */
  /* Note: The actual parameter new is __builtin_coro_size */
  __additionAwaitReturnFrame * __f = reinterpret_cast<__additionAwaitReturnFrame *>(operator new(sizeof(__additionAwaitReturnFrame), std::nothrow));
  
  if(nullptr == __f) {
    return generator::promise_type::get_return_object_on_allocation_failure();
  } 
  
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  __f->v = std::forward<int>(v);
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<generator>::promise_type{};
  
  /* Forward declare the resume and destroy function. */
  void __additionAwaitReturnResume(__additionAwaitReturnFrame * __f);
  void __additionAwaitReturnDestroy(__additionAwaitReturnFrame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__additionAwaitReturnResume;
  __f->destroy_fn = &__additionAwaitReturnDestroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __additionAwaitReturnResume(__f);
  
  
  return __f->__promise.get_return_object();
}

/* This function invoked by coroutine_handle<>::resume() */
void __additionAwaitReturnResume(__additionAwaitReturnFrame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_additionAwaitReturn_1;
      case 2: goto __resume_additionAwaitReturn_2;
      case 3: goto __resume_additionAwaitReturn_3;
    }
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:55 */
    __f->__suspend_55_11 = __f->__promise.initial_suspend();
    if(!__f->__suspend_55_11.await_ready()) {
      __f->__suspend_55_11.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_additionAwaitReturn_1:
    __f->__suspend_55_11.await_resume();
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:56 */
    __f->__suspend_56_24 = simpleReturn(__f->v);
    if(!__f->__suspend_56_24.await_ready()) {
      __f->__suspend_56_24.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)));
      __f->__suspend_index = 2;
      return;
    } 
    
    __resume_additionAwaitReturn_2:
    __f->__suspend_56_24_res = __f->__suspend_56_24.await_resume();
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:56 */
    __f->__suspend_56_51 = simpleReturn(__f->v + 1);
    if(!__f->__suspend_56_51.await_ready()) {
      __f->__suspend_56_51.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)));
      __f->__suspend_index = 3;
      return;
    } 
    
    __resume_additionAwaitReturn_3:
    __f->__suspend_56_51_res = __f->__suspend_56_51.await_resume();
    /* co_return EduCoroutineCoreturnWithCoawaitTest.cpp:56 */
    __f->__promise.return_value(__f->__suspend_56_24_res + __f->__suspend_56_51_res);
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:55 */
  __f->__suspend_55_11_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_55_11_1.await_ready()) {
    __f->__suspend_55_11_1.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
    return;
  } 
  
  __f->destroy_fn(__f);
}

/* This function invoked by coroutine_handle<>::destroy() */
void __additionAwaitReturnDestroy(__additionAwaitReturnFrame * __f)
{
  /* destroy all variables with dtors */
  __f->~__additionAwaitReturnFrame();
  /* Deallocating the coroutine frame */
  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */
  operator delete(static_cast<void *>(__f));
}


struct __additionAwaitReturn2Frame
{
  void (*resume_fn)(__additionAwaitReturn2Frame *);
  void (*destroy_fn)(__additionAwaitReturn2Frame *);
  std::__coroutine_traits_sfinae<generator>::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  int v;
  std::suspend_never __suspend_59_11;
  generator __suspend_60_24;
  int __suspend_60_24_res;
  generator __suspend_60_51;
  int __suspend_60_51_res;
  generator __suspend_60_80;
  int __suspend_60_80_res;
  std::suspend_always __suspend_59_11_1;
};

generator additionAwaitReturn2(int v)
{
  /* Allocate the frame including the promise */
  /* Note: The actual parameter new is __builtin_coro_size */
  __additionAwaitReturn2Frame * __f = reinterpret_cast<__additionAwaitReturn2Frame *>(operator new(sizeof(__additionAwaitReturn2Frame), std::nothrow));
  
  if(nullptr == __f) {
    return generator::promise_type::get_return_object_on_allocation_failure();
  } 
  
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  __f->v = std::forward<int>(v);
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<generator>::promise_type{};
  
  /* Forward declare the resume and destroy function. */
  void __additionAwaitReturn2Resume(__additionAwaitReturn2Frame * __f);
  void __additionAwaitReturn2Destroy(__additionAwaitReturn2Frame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__additionAwaitReturn2Resume;
  __f->destroy_fn = &__additionAwaitReturn2Destroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __additionAwaitReturn2Resume(__f);
  
  
  return __f->__promise.get_return_object();
}

/* This function invoked by coroutine_handle<>::resume() */
void __additionAwaitReturn2Resume(__additionAwaitReturn2Frame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_additionAwaitReturn2_1;
      case 2: goto __resume_additionAwaitReturn2_2;
      case 3: goto __resume_additionAwaitReturn2_3;
      case 4: goto __resume_additionAwaitReturn2_4;
    }
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:59 */
    __f->__suspend_59_11 = __f->__promise.initial_suspend();
    if(!__f->__suspend_59_11.await_ready()) {
      __f->__suspend_59_11.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_additionAwaitReturn2_1:
    __f->__suspend_59_11.await_resume();
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:60 */
    __f->__suspend_60_24 = simpleReturn(__f->v);
    if(!__f->__suspend_60_24.await_ready()) {
      __f->__suspend_60_24.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)));
      __f->__suspend_index = 2;
      return;
    } 
    
    __resume_additionAwaitReturn2_2:
    __f->__suspend_60_24_res = __f->__suspend_60_24.await_resume();
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:60 */
    __f->__suspend_60_51 = simpleReturn(__f->v + 1);
    if(!__f->__suspend_60_51.await_ready()) {
      __f->__suspend_60_51.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)));
      __f->__suspend_index = 3;
      return;
    } 
    
    __resume_additionAwaitReturn2_3:
    __f->__suspend_60_51_res = __f->__suspend_60_51.await_resume();
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:60 */
    __f->__suspend_60_80 = simpleReturn(__f->v + 2);
    if(!__f->__suspend_60_80.await_ready()) {
      __f->__suspend_60_80.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)));
      __f->__suspend_index = 4;
      return;
    } 
    
    __resume_additionAwaitReturn2_4:
    __f->__suspend_60_80_res = __f->__suspend_60_80.await_resume();
    /* co_return EduCoroutineCoreturnWithCoawaitTest.cpp:60 */
    __f->__promise.return_value((__f->__suspend_60_24_res + __f->__suspend_60_51_res) + __f->__suspend_60_80_res);
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:59 */
  __f->__suspend_59_11_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_59_11_1.await_ready()) {
    __f->__suspend_59_11_1.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
    return;
  } 
  
  __f->destroy_fn(__f);
}

/* This function invoked by coroutine_handle<>::destroy() */
void __additionAwaitReturn2Destroy(__additionAwaitReturn2Frame * __f)
{
  /* destroy all variables with dtors */
  __f->~__additionAwaitReturn2Frame();
  /* Deallocating the coroutine frame */
  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */
  operator delete(static_cast<void *>(__f));
}


struct __additionAwaitReturnWithIntFrame
{
  void (*resume_fn)(__additionAwaitReturnWithIntFrame *);
  void (*destroy_fn)(__additionAwaitReturnWithIntFrame *);
  std::__coroutine_traits_sfinae<generator>::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  int v;
  std::suspend_never __suspend_63_11;
  generator __suspend_67_24;
  int __suspend_67_24_res;
  generator __suspend_67_51;
  int __suspend_67_51_res;
  std::suspend_always __suspend_63_11_1;
};

generator additionAwaitReturnWithInt(int v)
{
  /* Allocate the frame including the promise */
  /* Note: The actual parameter new is __builtin_coro_size */
  __additionAwaitReturnWithIntFrame * __f = reinterpret_cast<__additionAwaitReturnWithIntFrame *>(operator new(sizeof(__additionAwaitReturnWithIntFrame), std::nothrow));
  
  if(nullptr == __f) {
    return generator::promise_type::get_return_object_on_allocation_failure();
  } 
  
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  __f->v = std::forward<int>(v);
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<generator>::promise_type{};
  
  /* Forward declare the resume and destroy function. */
  void __additionAwaitReturnWithIntResume(__additionAwaitReturnWithIntFrame * __f);
  void __additionAwaitReturnWithIntDestroy(__additionAwaitReturnWithIntFrame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__additionAwaitReturnWithIntResume;
  __f->destroy_fn = &__additionAwaitReturnWithIntDestroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __additionAwaitReturnWithIntResume(__f);
  
  
  return __f->__promise.get_return_object();
}

/* This function invoked by coroutine_handle<>::resume() */
void __additionAwaitReturnWithIntResume(__additionAwaitReturnWithIntFrame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_additionAwaitReturnWithInt_1;
      case 2: goto __resume_additionAwaitReturnWithInt_2;
      case 3: goto __resume_additionAwaitReturnWithInt_3;
    }
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:63 */
    __f->__suspend_63_11 = __f->__promise.initial_suspend();
    if(!__f->__suspend_63_11.await_ready()) {
      __f->__suspend_63_11.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_additionAwaitReturnWithInt_1:
    __f->__suspend_63_11.await_resume();
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:67 */
    __f->__suspend_67_24 = simpleReturn(__f->v);
    if(!__f->__suspend_67_24.await_ready()) {
      __f->__suspend_67_24.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)));
      __f->__suspend_index = 2;
      return;
    } 
    
    __resume_additionAwaitReturnWithInt_2:
    __f->__suspend_67_24_res = __f->__suspend_67_24.await_resume();
    
    /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:67 */
    __f->__suspend_67_51 = simpleReturn(__f->v + 1);
    if(!__f->__suspend_67_51.await_ready()) {
      __f->__suspend_67_51.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)));
      __f->__suspend_index = 3;
      return;
    } 
    
    __resume_additionAwaitReturnWithInt_3:
    __f->__suspend_67_51_res = __f->__suspend_67_51.await_resume();
    /* co_return EduCoroutineCoreturnWithCoawaitTest.cpp:67 */
    __f->__promise.return_value((__f->__suspend_67_24_res + __f->__suspend_67_51_res) + 47);
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await EduCoroutineCoreturnWithCoawaitTest.cpp:63 */
  __f->__suspend_63_11_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_63_11_1.await_ready()) {
    __f->__suspend_63_11_1.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
    return;
  } 
  
  __f->destroy_fn(__f);
}

/* This function invoked by coroutine_handle<>::destroy() */
void __additionAwaitReturnWithIntDestroy(__additionAwaitReturnWithIntFrame * __f)
{
  /* destroy all variables with dtors */
  __f->~__additionAwaitReturnWithIntFrame();
  /* Deallocating the coroutine frame */
  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */
  operator delete(static_cast<void *>(__f));
}


int main()
{
  generator a = additionAwaitReturn(2);
  generator b = additionAwaitReturn2(2);
  generator c = additionAwaitReturnWithInt(6);
  return 0;
}
