#include <vector>
#include <algorithm>
#include <string>

using namespace std;

int main()
{
  std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > v = std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >{std::initializer_list<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >{std::basic_string<char, std::char_traits<char>, std::allocator<char> >("aaa"), std::basic_string<char, std::char_traits<char>, std::allocator<char> >("bbb"), std::basic_string<char, std::char_traits<char>, std::allocator<char> >("ccc")}};
      
  class __lambda_12_26
  {
    public: 
    template<class type_parameter_0_0>
    inline /*constexpr */ auto operator()(const type_parameter_0_0 & str) const
    {
      return operator==(str, "bbb");
    }
    
    #ifdef INSIGHTS_USE_TEMPLATE
    template<>
    inline /*constexpr */ bool operator()<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > & str) const
    {
      return std::operator==(str, "bbb");
    }
    #endif
    
    private: 
    template<class type_parameter_0_0>
    static inline /*constexpr */ auto __invoke(const type_parameter_0_0 & str)
    {
      return __lambda_12_26{}.operator()<type_parameter_0_0>(str);
    }
    
  };
  
  std::__wrap_iter<std::basic_string<char, std::char_traits<char>, std::allocator<char> > *> it = std::find_if(std::begin(v), std::end(v), __lambda_12_26{});
  return 0;
}
