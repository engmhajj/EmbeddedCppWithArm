class CXXFoldExprTest
{
  
  public: 
  template<typename ... Ts>
  inline auto UnaryRightFold(const Ts &... ts)
  {
    return (ts / ...);
  }
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline int UnaryRightFold<int, int, int, int>(const int & __ts0, const int & __ts1, const int & __ts2, const int & __ts3)
  {
    return __ts0 / (__ts1 / (__ts2 / __ts3));
  }
  #endif
  
  template<typename ... Ts>
  inline auto UnaryLeftFold(const Ts &... ts)
  {
    return (... / ts);
  }
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline int UnaryLeftFold<int, int, int, int>(const int & __ts0, const int & __ts1, const int & __ts2, const int & __ts3)
  {
    return ((__ts0 / __ts1) / __ts2) / __ts3;
  }
  #endif
  
  template<typename ... Ts>
  inline auto BinaryRightFold(const Ts &... ts)
  {
    return (ts / ... / 2);
  }
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline int BinaryRightFold<int, int, int, int>(const int & __ts0, const int & __ts1, const int & __ts2, const int & __ts3)
  {
    return __ts0 / (__ts1 / (__ts2 / (__ts3 / 2)));
  }
  #endif
  
  template<typename ... Ts>
  inline auto BinaryLeftFold(const Ts &... ts)
  {
    return (2 / ... / ts);
  }
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline int BinaryLeftFold<int, int, int, int>(const int & __ts0, const int & __ts1, const int & __ts2, const int & __ts3)
  {
    return (((2 / __ts0) / __ts1) / __ts2) / __ts3;
  }
  #endif
  
};


int main()
{
  CXXFoldExprTest cxxFoldExprTest = {};
  cxxFoldExprTest.UnaryRightFold<int, int, int, int>(2, 3, 4, 5);
  cxxFoldExprTest.UnaryLeftFold<int, int, int, int>(2, 3, 4, 5);
  cxxFoldExprTest.BinaryRightFold<int, int, int, int>(2, 3, 4, 5);
  cxxFoldExprTest.BinaryLeftFold<int, int, int, int>(2, 3, 4, 5);
  return 0;
}
