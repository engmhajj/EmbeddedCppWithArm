#include <new> // for thread-safe static's placement new
#include <stdint.h> // for uint64_t under Linux/GCC

#include <cstdio>
#include <cstring>
#include <new>

class Singleton
{
  
  public: 
  static Singleton & Instance();
  
  inline int Get() const
  {
    return this->mX;
  }
  
  inline void Set(int x)
  {
    this->mX = x;
  }
  
  
  private: 
  inline Singleton() noexcept = default;
  inline ~Singleton() noexcept
  {
  }
  
  int mX;
  public: 
};


static size_t counter = 0;

Singleton & Singleton::Instance()
{
  static uint64_t __singletonGuard;
  alignas(Singleton) static char __singleton[sizeof(Singleton)];
  
  if((__singletonGuard & 255) == 0) {
    if(__cxa_guard_acquire(&__singletonGuard)) {
      new (&__singleton)Singleton();
      __singletonGuard = true;
      __cxa_guard_release(&__singletonGuard);
      /* __cxa_atexit(Singleton::~Singleton, &__singleton, &__dso_handle); */
    } 
    
  } 
  
  static bool passed = true;
  return *reinterpret_cast<Singleton*>(__singleton);
}


class Bingleton
{
  
  public: 
  inline int Get() const
  {
    return this->mX;
  }
  
  inline void Set(int x)
  {
    this->mX = x;
  }
  
  inline Bingleton() noexcept = default;
  inline ~Bingleton() noexcept
  {
  }
  
  
  private: 
  int mX;
  public: 
};


void B()
{
  static uint64_t __bbGuard;
  alignas(Bingleton) static char __bb[sizeof(Bingleton)];
  
  if((__bbGuard & 255) == 0) {
    if(__cxa_guard_acquire(&__bbGuard)) {
      new (&__bb)Bingleton();
      __bbGuard = true;
      __cxa_guard_release(&__bbGuard);
      /* __cxa_atexit(Bingleton::~Bingleton, &__bb, &__dso_handle); */
    } 
    
  } 
  
}

Bingleton * B(bool c)
{
  static uint64_t __bbGuard;
  alignas(Bingleton) static char __bb[sizeof(Bingleton)];
  
  if((__bbGuard & 255) == 0) {
    if(__cxa_guard_acquire(&__bbGuard)) {
      new (&__bb)Bingleton();
      __bbGuard = true;
      __cxa_guard_release(&__bbGuard);
      /* __cxa_atexit(Bingleton::~Bingleton, &__bb, &__dso_handle); */
    } 
    
  } 
  
  if(c) {
    return nullptr;
  } 
  
  return &*reinterpret_cast<Bingleton*>(__bb);
}

Bingleton & BB(bool c)
{
  static uint64_t __bbGuard;
  alignas(Bingleton) static char __bb[sizeof(Bingleton)];
  
  if((__bbGuard & 255) == 0) {
    if(__cxa_guard_acquire(&__bbGuard)) {
      new (&__bb)Bingleton();
      __bbGuard = true;
      __cxa_guard_release(&__bbGuard);
      /* __cxa_atexit(Bingleton::~Bingleton, &__bb, &__dso_handle); */
    } 
    
  } 
  
  if(c) {
    return *reinterpret_cast<Bingleton*>(__bb);
  } 
  
  return *reinterpret_cast<Bingleton*>(__bb);
}

int main()
{
  Singleton & s = Singleton::Instance();
  s.Set(22);
  B();
  Bingleton * bb = B(false);
  Bingleton & b2 = BB(true);
  return s.Get();
}
