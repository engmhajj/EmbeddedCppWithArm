#define INSIGHTS_USE_TEMPLATE

#include <cstdio>
#include <type_traits>
#include <utility>

namespace details
{
  namespace array_single_compare
  {
    template<typename T, size_t N, typename TTo, size_t ...I>
    inline constexpr bool Compare(const T (&ar)[N], const TTo & to, std::index_sequence<I...>)
    {
      return ((to == ar[I]) && ...);
    }
    
    /* First instantiated from: FunctionalCast2Test.cpp:18 */
    #ifdef INSIGHTS_USE_TEMPLATE
    template<>
    inline constexpr bool Compare<unsigned char, 6, int, 0, 1, 2, 3, 4, 5>(const unsigned char (&ar)[6], const int & to, std::integer_sequence<unsigned long, 0, 1, 2, 3, 4, 5>)
    {
      return (to == static_cast<int>(ar[0UL])) && ((to == static_cast<int>(ar[1UL])) && ((to == static_cast<int>(ar[2UL])) && ((to == static_cast<int>(ar[3UL])) && ((to == static_cast<int>(ar[4UL])) && (to == static_cast<int>(ar[5UL]))))));
    }
    #endif
    
    
  }
  
}

template<typename T, size_t N, typename TTo>
inline constexpr bool Compare(const T (&ar)[N], const TTo & to)
{
  return details::array_single_compare::Compare(ar, to, std::make_index_sequence<N>{});
}

/* First instantiated from: FunctionalCast2Test.cpp:47 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr bool Compare<unsigned char, 6, int>(const unsigned char (&ar)[6], const int & to)
{
  return details::array_single_compare::Compare(ar, to, std::integer_sequence<unsigned long, 0, 1, 2, 3, 4, 5>{});
}
#endif


#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr bool Compare<unsigned char, 6, unsigned char[6]>(const unsigned char (&ar)[6], const unsigned char (&to)[6]);
#endif


namespace details
{
  namespace array_compare
  {
    template<typename T, size_t N, size_t ...I>
    inline constexpr bool Compare(const T (&ar)[N], const T (&to)[N], std::index_sequence<I...>)
    {
      return ((to[I] == ar[I]) && ...);
    }
    
    /* First instantiated from: FunctionalCast2Test.cpp:32 */
    #ifdef INSIGHTS_USE_TEMPLATE
    template<>
    inline constexpr bool Compare<unsigned char, 6, 0, 1, 2, 3, 4, 5>(const unsigned char (&ar)[6], const unsigned char (&to)[6], std::integer_sequence<unsigned long, 0, 1, 2, 3, 4, 5>)
    {
      return (static_cast<int>(to[0UL]) == static_cast<int>(ar[0UL])) && ((static_cast<int>(to[1UL]) == static_cast<int>(ar[1UL])) && ((static_cast<int>(to[2UL]) == static_cast<int>(ar[2UL])) && ((static_cast<int>(to[3UL]) == static_cast<int>(ar[3UL])) && ((static_cast<int>(to[4UL]) == static_cast<int>(ar[4UL])) && (static_cast<int>(to[5UL]) == static_cast<int>(ar[5UL]))))));
    }
    #endif
    
    
  }
  
}

template<typename T, size_t N>
inline constexpr bool Compare(const T (&ar)[N], const T (&to)[N])
{
  return details::array_compare::Compare(ar, to, std::make_index_sequence<N>{});
}

/* First instantiated from: FunctionalCast2Test.cpp:51 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr bool Compare<unsigned char, 6>(const unsigned char (&ar)[6], const unsigned char (&to)[6])
{
  return details::array_compare::Compare(ar, to, std::integer_sequence<unsigned long, 0, 1, 2, 3, 4, 5>{});
}
#endif


struct MACAddress
{
  unsigned char value[6];
};


void Main()
{
  const MACAddress macA = {{1, 1, 1, 1, 1, 1}};
  const MACAddress macB = {{1, 1, 1, 1, 1, 2}};
  const MACAddress macC = {{1, 1, 1, 1, 1, 1}};
  printf("Equal: %d\n", static_cast<int>(Compare(macA.value, 1)));
  printf("Not equal: %d\n", static_cast<int>(!Compare(macB.value, 1)));
  printf("---------------\n");
  printf("Not equal: %d\n", static_cast<int>(!Compare(macA.value, macB.value)));
  printf("Equal: %d\n", static_cast<int>(Compare(macA.value, macC.value)));
}
