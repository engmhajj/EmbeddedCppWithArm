/*************************************************************************************
 * NOTE: The coroutine transformation you've enabled is a hand coded transformation! *
 *       Most of it is _not_ present in the AST. What you see is an approximation.   *
 *************************************************************************************/
void __cxa_start(void);
void __cxa_atexit(void);

#include <iostream>
#include <coroutine>
#include <thread>
#include <queue>
#include <functional>

std::queue<std::function<bool ()>, std::deque<std::function<bool ()>, std::allocator<std::function<bool ()> > > > task_queue = std::queue<std::function<bool ()>, std::deque<std::function<bool ()>, std::allocator<std::function<bool ()> > > >();

struct mysleep
{
  inline mysleep(int n)
  : delay{std::chrono::duration<long long, std::ratio<1, 1000> >{n}}
  {
  }
  
  inline constexpr bool await_ready() const noexcept
  {
    return false;
  }
  
  inline void await_suspend(std::coroutine_handle<void> h) const noexcept
  {
    std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > > start = std::chrono::steady_clock::now();
        
    class __lambda_20_25
    {
      public: 
      inline /*constexpr */ bool operator()() const
      {
        if(operator>(std::chrono::operator<=>(std::chrono::operator-(std::chrono::steady_clock::now(), start), d), std::_CmpUnspecifiedParam(0))) {
          h.resume();
          return true;
        } else {
          return false;
        } 
        
      }
      
      private: 
      std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > > start;
      std::coroutine_handle<void> h;
      std::chrono::duration<long long, std::ratio<1, 1000> > d;
      public: 
      // inline /*constexpr */ __lambda_20_25 & operator=(const __lambda_20_25 &) /* noexcept */ = delete;
      // inline /*constexpr */ __lambda_20_25(const __lambda_20_25 &) noexcept = default;
      // inline /*constexpr */ __lambda_20_25(__lambda_20_25 &&) noexcept = default;
      __lambda_20_25(const std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000> > > & _start, const std::coroutine_handle<void> & _h, const std::chrono::duration<long long, std::ratio<1, 1000> > & _d)
      : start{_start}
      , h{_h}
      , d{_d}
      {}
      
    };
    
    task_queue.push(std::function<bool ()>(__lambda_20_25{start, h, this->delay}));
  }
  
  inline void await_resume() const noexcept
  {
  }
  
  std::chrono::duration<long long, std::ratio<1, 1000> > delay;
};


struct Task
{
  struct promise_type
  {
    inline constexpr promise_type() noexcept = default;
    inline Task get_return_object()
    {
      return {};
    }
    
    inline std::suspend_never initial_suspend()
    {
      return {};
    }
    
    inline std::suspend_always final_suspend() noexcept
    {
      return {};
    }
    
    inline void unhandled_exception()
    {
    }
    
  };
  
};


struct __fooFrame
{
  void (*resume_fn)(__fooFrame *);
  void (*destroy_fn)(__fooFrame *);
  std::__coroutine_traits_sfinae<Task>::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  int i;
  std::suspend_never __suspend_46_6;
  mysleep __suspend_49_18;
  std::suspend_always __suspend_46_6_1;
};

Task foo() noexcept
{
  /* Allocate the frame including the promise */
  /* Note: The actual parameter new is __builtin_coro_size */
  __fooFrame * __f = reinterpret_cast<__fooFrame *>(operator new(sizeof(__fooFrame)));
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<Task>::promise_type{};
  
  /* Forward declare the resume and destroy function. */
  void __fooResume(__fooFrame * __f);
  void __fooDestroy(__fooFrame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__fooResume;
  __f->destroy_fn = &__fooDestroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __fooResume(__f);
  
  
  return __f->__promise.get_return_object();
}

/* This function invoked by coroutine_handle<>::resume() */
void __fooResume(__fooFrame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_foo_1;
      case 2: goto __resume_foo_2;
    }
    
    /* co_await Issue628.cpp:46 */
    __f->__suspend_46_6 = __f->__promise.initial_suspend();
    if(!__f->__suspend_46_6.await_ready()) {
      __f->__suspend_46_6.await_suspend(std::coroutine_handle<Task::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_foo_1:
    __f->__suspend_46_6.await_resume();
    std::operator<<(std::cout, "1. hello from foo1").operator<<(std::endl);
    for(__f->i = 0; __f->i < 10; ++__f->i) {
      
      /* co_await Issue628.cpp:49 */
      __f->__suspend_49_18 = mysleep{10};
      if(!__f->__suspend_49_18.await_ready()) {
        __f->__suspend_49_18.await_suspend(std::coroutine_handle<Task::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
        __f->__suspend_index = 2;
        return;
      } 
      
      __resume_foo_2:
      __f->__suspend_49_18.await_resume();
      std::operator<<(std::cout, "2. hello from foo1").operator<<(std::endl);
    }
    
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await Issue628.cpp:46 */
  __f->__suspend_46_6_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_46_6_1.await_ready()) {
    __f->__suspend_46_6_1.await_suspend(std::coroutine_handle<Task::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
    return;
  } 
  
  __f->destroy_fn(__f);
}

/* This function invoked by coroutine_handle<>::destroy() */
void __fooDestroy(__fooFrame * __f)
{
  /* destroy all variables with dtors */
  __f->~__fooFrame();
  /* Deallocating the coroutine frame */
  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */
  operator delete(static_cast<void *>(__f));
}


int main()
{
  foo();
  return 0;
}
