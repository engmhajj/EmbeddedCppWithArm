/*************************************************************************************
 * NOTE: The coroutine transformation you've enabled is a hand coded transformation! *
 *       Most of it is _not_ present in the AST. What you see is an approximation.   *
 *************************************************************************************/
#include <coroutine>
#include <exception>
#include <new>
#include <utility>

struct generator
{
  struct promise_type
  {
    int current_value{};
    inline std::suspend_always yield_value(int value)
    {
      this->current_value = value;
      return {};
    }
    
    inline std::suspend_never initial_suspend()
    {
      return {};
    }
    
    inline std::suspend_always final_suspend() noexcept
    {
      return {};
    }
    
    inline generator get_return_object()
    {
      return generator{this};
    }
    
    inline void unhandled_exception()
    {
      std::terminate();
    }
    
    inline void return_value(int v)
    {
      this->current_value = v;
    }
    
    // inline constexpr promise_type() noexcept = default;
  };
  
  inline generator(generator && rhs)
  : p{{std::exchange(rhs.p, nullptr)}}
  {
  }
  
  inline ~generator() noexcept
  {
    if(this->p.operator bool()) {
      this->p.destroy();
    } 
    
  }
  
  
  private: 
  inline explicit generator(promise_type * _p)
  : p{std::coroutine_handle<promise_type>::from_promise(*_p)}
  {
  }
  
  std::coroutine_handle<promise_type> p;
  public: 
  // inline constexpr generator(const generator &) /* noexcept */ = delete;
  // inline generator & operator=(const generator &) /* noexcept */ = delete;
};


struct __funFrame
{
  void (*resume_fn)(__funFrame *);
  void (*destroy_fn)(__funFrame *);
  std::__coroutine_traits_sfinae<generator>::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  std::suspend_never __suspend_34_11;
  std::suspend_always __suspend_34_11_1;
};

generator fun()
{
  /* Allocate the frame including the promise */
  /* Note: The actual parameter new is __builtin_coro_size */
  __funFrame * __f = reinterpret_cast<__funFrame *>(operator new(sizeof(__funFrame)));
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<generator>::promise_type{};
  
  /* Forward declare the resume and destroy function. */
  void __funResume(__funFrame * __f);
  void __funDestroy(__funFrame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__funResume;
  __f->destroy_fn = &__funDestroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __funResume(__f);
  
  
  return __f->__promise.get_return_object();
}

/* This function invoked by coroutine_handle<>::resume() */
void __funResume(__funFrame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_fun_1;
    }
    
    /* co_await EduCoroutineSimpleTest.cpp:34 */
    __f->__suspend_34_11 = __f->__promise.initial_suspend();
    if(!__f->__suspend_34_11.await_ready()) {
      __f->__suspend_34_11.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_fun_1:
    __f->__suspend_34_11.await_resume();
    /* co_return EduCoroutineSimpleTest.cpp:35 */
    __f->__promise.return_value(2);
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await EduCoroutineSimpleTest.cpp:34 */
  __f->__suspend_34_11_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_34_11_1.await_ready()) {
    __f->__suspend_34_11_1.await_suspend(std::coroutine_handle<generator::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
    return;
  } 
  
  __f->destroy_fn(__f);
}

/* This function invoked by coroutine_handle<>::destroy() */
void __funDestroy(__funFrame * __f)
{
  /* destroy all variables with dtors */
  __f->~__funFrame();
  /* Deallocating the coroutine frame */
  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */
  operator delete(static_cast<void *>(__f));
}


int main()
{
  generator s = fun();
  return 0;
}
