#include <cstdio>
#include <string>
#include <tuple>
#include <vector>

template<typename Tuple_t>
void fillTuples(std::vector<Tuple_t> tuples)
{
  tuples.emplace_back("hello", 1);
}

/* First instantiated from: TupeInRangeBasedForTest.cpp:13 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void fillTuples<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> >(std::vector<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > tuples)
{
  tuples.emplace_back<const char (&)[6], int>("hello", 1);
}
#endif


int main()
{
  std::vector<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > tuples = std::vector<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > >();
  fillTuples(std::vector<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > >(tuples));
  {
    std::vector<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > & __range1 = tuples;
    std::__wrap_iter<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> *> __begin1 = __range1.begin();
    std::__wrap_iter<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> *> __end1 = __range1.end();
    for(; std::operator!=(__begin1, __end1); __begin1.operator++()) {
      std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> __operator15 = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>(__begin1.operator*());
      std::basic_string<char, std::char_traits<char>, std::allocator<char> > && s = std::get<0UL>(static_cast<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> &&>(__operator15));
      int && n = std::get<1UL>(static_cast<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> &&>(__operator15));
      printf("c=%s, n=%d\n", s.c_str(), n);
    }
    
  }
  return 0;
}
