#define INSIGHTS_USE_TEMPLATE

template<typename T>
struct A
{
  void foo(int);
  
};

/* First instantiated from: TemplateSpecializationWithDependentTypeTest.cpp:22 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct A<int *>
{
  struct B
  {
    // inline constexpr B() noexcept = default;
  };
  
  B foo;
  // inline constexpr A() noexcept = default;
};

#endif

template<typename T>
struct A<T *>
{
  struct B
  {
  };
  
  B foo;
};


int main()
{
  A<int *> a;
  return 0;
}
