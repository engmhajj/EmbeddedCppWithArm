#include <new> // for thread-safe static's placement new
#include <stdint.h> // for uint64_t under Linux/GCC

#include <vector>

const std::vector<int, std::allocator<int> > & getTheData()
{
  static uint64_t __theDataGuard;
  alignas(std::vector<int, std::allocator<int> >) static char __theData[sizeof(std::vector<int, std::allocator<int> >)];
  
  if((__theDataGuard & 255) == 0) {
    if(__cxa_guard_acquire(&__theDataGuard)) {
      new (&__theData)std::vector<int, std::allocator<int> >();
      __theDataGuard = true;
      __cxa_guard_release(&__theDataGuard);
      /* __cxa_atexit(std::vector<int, std::allocator<int> >::~std::vector<int, std::allocator<int> >, &__theData, &__dso_handle); */
    } 
    
  } 
  
  return *reinterpret_cast<std::vector<int, std::allocator<int> >*>(__theData);
}

int main()
{
  const std::vector<int, std::allocator<int> > & x = getTheData();
  return 0;
}
