/*************************************************************************************
 * NOTE: The coroutine transformation you've enabled is a hand coded transformation! *
 *       Most of it is _not_ present in the AST. What you see is an approximation.   *
 *************************************************************************************/
#include <coroutine>
#include <cstdint>
#include <exception>
#include <iostream>
#include <iostream>
#include <utility>

template<class T>
struct task
{
  struct promise_type
  {
    inline auto get_return_object()
    {
      return task<T>(std::coroutine_handle<promise_type>::from_promise(*this));
    }
    
    inline std::suspend_always initial_suspend()
    {
      return {};
    }
    
    struct final_awaiter
    {
      inline bool await_ready() noexcept
      {
        return false;
      }
      
      inline void await_resume() noexcept
      {
      }
      
      inline std::coroutine_handle<void> await_suspend(std::coroutine_handle<promise_type> h) noexcept
      {
        {
          auto previous = h.promise().previous;
          if(previous) {
            return previous;
          } else {
            return std::noop_coroutine().operator std::coroutine_handle<void>();
          } 
          
        }
        
      }
      
    };
    
    inline final_awaiter final_suspend() noexcept
    {
      return {};
    }
    
    inline void unhandled_exception()
    {
      throw ;
    }
    
    inline void return_value(T value)
    {
      this->result = std::move(value);
    }
    
    T result;
    std::coroutine_handle<void> previous;
  };
  
  inline task(std::coroutine_handle<promise_type> h)
  : coro(h)
  {
  }
  
  inline task(task<T> && t) = default;
  inline task<T> & operator=(task<T> && t) = default;
  inline ~task()
  {
    this->coro.destroy();
  }
  
  struct awaiter
  {
    inline bool await_ready()
    {
      return false;
    }
    
    inline T await_resume()
    {
      return std::move(this->coro.promise().result);
    }
    
    inline auto await_suspend(std::coroutine_handle<void> h)
    {
      this->coro.promise().previous = h;
      return this->coro;
    }
    
    std::coroutine_handle<promise_type> coro;
  };
  
  inline awaiter operator co_await()
  {
    return awaiter{{this->coro}};
  }
  
  inline T operator()()
  {
    this->coro.resume();
    return std::move(this->coro.promise().result);
  }
  
  
  private: 
  std::coroutine_handle<promise_type> coro;
};

/* First instantiated from: Issue518.cpp:77 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct task<int>
{
  struct promise_type
  {
    inline task<int> get_return_object()
    {
      return task<int>(task<int>(std::coroutine_handle<promise_type>::from_promise(*this)));
    }
    
    inline std::suspend_always initial_suspend()
    {
      return {};
    }
    
    struct final_awaiter
    {
      inline bool await_ready() noexcept
      {
        return false;
      }
      
      inline void await_resume() noexcept
      {
      }
      
      inline std::coroutine_handle<void> await_suspend(std::coroutine_handle<task<int>::promise_type> h) noexcept
      {
        {
          std::coroutine_handle<void> previous = std::coroutine_handle<void>(h.promise().previous);
          if(previous.operator bool()) {
            return std::coroutine_handle<void>(static_cast<std::coroutine_handle<void> &&>(previous));
          } else {
            return std::noop_coroutine().operator std::coroutine_handle<void>();
          } 
          
        }
        
      }
      
    };
    
    inline final_awaiter final_suspend() noexcept
    {
      return {};
    }
    
    inline void unhandled_exception()
    {
      throw ;
    }
    
    inline void return_value(int value)
    {
      this->result = std::move(value);
    }
    
    int result;
    std::coroutine_handle<void> previous;
    // inline constexpr promise_type() noexcept = default;
  };
  
  inline task(std::coroutine_handle<promise_type> h)
  : coro{std::coroutine_handle<promise_type>(h)}
  {
  }
  
  inline constexpr task(task<int> && t) /* noexcept */ = default;
  inline task<int> & operator=(task<int> && t) /* noexcept */ = default;
  inline ~task() noexcept
  {
    this->coro.destroy();
  }
  
  struct awaiter
  {
    inline bool await_ready()
    {
      return false;
    }
    
    inline int await_resume()
    {
      return std::move(this->coro.promise().result);
    }
    
    inline std::coroutine_handle<promise_type> await_suspend(std::coroutine_handle<void> h)
    {
      this->coro.promise().previous.operator=(h);
      return std::coroutine_handle<promise_type>(this->coro);
    }
    
    std::coroutine_handle<promise_type> coro;
  };
  
  inline awaiter operator co_await()
  {
    return awaiter{std::coroutine_handle<promise_type>(this->coro)};
  }
  
  inline int operator()()
  {
    this->coro.resume();
    return std::move(this->coro.promise().result);
  }
  
  
  private: 
  std::coroutine_handle<promise_type> coro;
  public: 
  // inline constexpr task(const task<int> &) /* noexcept */ = delete;
  // inline task<int> & operator=(const task<int> &) /* noexcept */ = delete;
};

#endif

struct __get_randomFrame
{
  void (*resume_fn)(__get_randomFrame *);
  void (*destroy_fn)(__get_randomFrame *);
  std::__coroutine_traits_sfinae<task<int> >::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  std::suspend_always __suspend_77_11;
  task<int>::promise_type::final_awaiter __suspend_77_11_1;
};

task<int> get_random()
{
  /* Allocate the frame including the promise */
  /* Note: The actual parameter new is __builtin_coro_size */
  __get_randomFrame * __f = reinterpret_cast<__get_randomFrame *>(operator new(sizeof(__get_randomFrame)));
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<task<int> >::promise_type{};
  
  /* Forward declare the resume and destroy function. */
  void __get_randomResume(__get_randomFrame * __f);
  void __get_randomDestroy(__get_randomFrame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__get_randomResume;
  __f->destroy_fn = &__get_randomDestroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __get_randomResume(__f);
  
  
  return __f->__promise.get_return_object();
}

/* This function invoked by coroutine_handle<>::resume() */
void __get_randomResume(__get_randomFrame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_get_random_1;
    }
    
    /* co_await Issue518.cpp:77 */
    __f->__suspend_77_11 = __f->__promise.initial_suspend();
    if(!__f->__suspend_77_11.await_ready()) {
      __f->__suspend_77_11.await_suspend(std::coroutine_handle<task<int>::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_get_random_1:
    __f->__suspend_77_11.await_resume();
    std::operator<<(std::cout, "in get_random()\n");
    /* co_return Issue518.cpp:80 */
    __f->__promise.return_value(4);
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await Issue518.cpp:77 */
  __f->__suspend_77_11_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_77_11_1.await_ready()) {
    __builtin_coro_resume(__f->__suspend_77_11_1.await_suspend(std::coroutine_handle<task<int>::promise_type>::from_address(static_cast<void *>(__f))).address());
    return;
  } 
  
  __f->destroy_fn(__f);
}

/* This function invoked by coroutine_handle<>::destroy() */
void __get_randomDestroy(__get_randomFrame * __f)
{
  /* destroy all variables with dtors */
  __f->~__get_randomFrame();
  /* Deallocating the coroutine frame */
  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */
  operator delete(static_cast<void *>(__f));
}


struct __testFrame
{
  void (*resume_fn)(__testFrame *);
  void (*destroy_fn)(__testFrame *);
  std::__coroutine_traits_sfinae<task<int> >::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  task<int> v;
  task<int> u;
  int xres;
  std::suspend_always __suspend_83_11;
  task<int>::awaiter __suspend_88_17;
  int __suspend_88_17_res;
  task<int>::awaiter __suspend_88_30;
  int __suspend_88_30_res;
  task<int>::promise_type::final_awaiter __suspend_83_11_1;
};

task<int> test()
{
  /* Allocate the frame including the promise */
  /* Note: The actual parameter new is __builtin_coro_size */
  __testFrame * __f = reinterpret_cast<__testFrame *>(operator new(sizeof(__testFrame)));
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<task<int> >::promise_type{};
  
  /* Forward declare the resume and destroy function. */
  void __testResume(__testFrame * __f);
  void __testDestroy(__testFrame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__testResume;
  __f->destroy_fn = &__testDestroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __testResume(__f);
  
  
  return __f->__promise.get_return_object();
}

/* This function invoked by coroutine_handle<>::resume() */
void __testResume(__testFrame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_test_1;
      case 2: goto __resume_test_2;
      case 3: goto __resume_test_3;
    }
    
    /* co_await Issue518.cpp:83 */
    __f->__suspend_83_11 = __f->__promise.initial_suspend();
    if(!__f->__suspend_83_11.await_ready()) {
      __f->__suspend_83_11.await_suspend(std::coroutine_handle<task<int>::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_test_1:
    __f->__suspend_83_11.await_resume();
    __f->v = get_random();
    __f->u = get_random();
    std::operator<<(std::cout, "in test()\n");
    
    /* co_await Issue518.cpp:88 */
    __f->__suspend_88_17 = __f->v.operator co_await();
    if(!__f->__suspend_88_17.await_ready()) {
      __builtin_coro_resume(__f->__suspend_88_17.await_suspend(std::coroutine_handle<task<int>::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>()).address());
      __f->__suspend_index = 2;
      return;
    } 
    
    __resume_test_2:
    __f->__suspend_88_17_res = __f->__suspend_88_17.await_resume();
    
    /* co_await Issue518.cpp:88 */
    __f->__suspend_88_30 = __f->u.operator co_await();
    if(!__f->__suspend_88_30.await_ready()) {
      __builtin_coro_resume(__f->__suspend_88_30.await_suspend(std::coroutine_handle<task<int>::promise_type>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>()).address());
      __f->__suspend_index = 3;
      return;
    } 
    
    __resume_test_3:
    __f->__suspend_88_30_res = __f->__suspend_88_30.await_resume();
    __f->xres = (__f->__suspend_88_17_res + __f->__suspend_88_30_res);
    /* co_return Issue518.cpp:89 */
    __f->__promise.return_value(__f->xres);
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await Issue518.cpp:83 */
  __f->__suspend_83_11_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_83_11_1.await_ready()) {
    __builtin_coro_resume(__f->__suspend_83_11_1.await_suspend(std::coroutine_handle<task<int>::promise_type>::from_address(static_cast<void *>(__f))).address());
    return;
  } 
  
  __f->destroy_fn(__f);
}

/* This function invoked by coroutine_handle<>::destroy() */
void __testDestroy(__testFrame * __f)
{
  /* destroy all variables with dtors */
  __f->~__testFrame();
  /* Deallocating the coroutine frame */
  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */
  operator delete(static_cast<void *>(__f));
}


void noop_coroutine()
{
  task<int> t = test();
  int result = t.operator()();
  std::operator<<(std::cout.operator<<(result), '\n');
}
