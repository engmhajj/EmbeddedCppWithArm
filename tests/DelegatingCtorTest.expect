#define INSIGHTS_USE_TEMPLATE

template<typename T>
struct Foo
{
  inline Foo(char x, int y)
  : _x{x}
  , _y{y}
  {
  }
  
  inline Foo(int y)
  : Foo<T>('a', y)
  {
  }
  
  char _x;
  int _y;
};

/* First instantiated from: DelegatingCtorTest.cpp:14 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct Foo<char>
{
  inline Foo(char x, int y)
  : _x{x}
  , _y{y}
  {
  }
  
  inline Foo(int y);
  
  char _x;
  int _y;
};

#endif
/* First instantiated from: DelegatingCtorTest.cpp:21 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct Foo<int>
{
  inline Foo(char x, int y)
  : _x{x}
  , _y{y}
  {
  }
  
  inline Foo(int y)
  : Foo<int>('a', y)
  {
  }
  
  char _x;
  int _y;
};

#endif

template<typename T>
struct Bar : public Foo<T>
{
  inline Bar(int x)
  : Foo<T>(x, 2)
  {
  }
  
};

/* First instantiated from: DelegatingCtorTest.cpp:24 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct Bar<char> : public Foo<char>
{
  inline Bar(int x)
  : Foo<char>(static_cast<char>(x), 2)
  {
  }
  
};

#endif

int main()
{
  Foo<int> f = Foo<int>{1, 2};
  Foo<int> f2 = Foo<int>{1};
  Bar<char> b = Bar<char>{1};
  return 0;
}
