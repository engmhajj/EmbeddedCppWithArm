template<typename ReturnValue, typename ... Args>
class function
{
  
  public: 
  inline function() = default;
  template<typename T>
  inline function(T && f)
  {
  }
  
};

/* First instantiated from: LambdaAndInClassInitializerTest.cpp:17 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class function<void ()>
{
  
  public: 
  inline constexpr function() /* noexcept */ = default;
  template<typename T>
  inline function(T && f);
  
  
  /* First instantiated from: LambdaAndInClassInitializerTest.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline function<__lambda_17_38>(__lambda_17_38 && f)
  {
  }
  #endif
  
  
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline function<const function<void ()> &>(const function<void ()> & f);
  #endif
  
  
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline function<function<void ()> >(function<void ()> && f);
  #endif
  
  
};

#endif

class EventContainer
{
  
  private: 
  int val;
  function<void ()> something;
  
  public: 
    
  class __lambda_17_38
  {
    public: 
    inline /*constexpr */ void operator()() const
    {
      __this->val;
    }
    
    private: 
    EventContainer * __this;
    
    public:
    __lambda_17_38(EventContainer * _this)
    : __this{_this}
    {}
    
  } __lambda_17_38{this};
  
  // inline constexpr EventContainer() noexcept(false) = default;
};


int main()
{
  EventContainer e = EventContainer();
  return 0;
}
